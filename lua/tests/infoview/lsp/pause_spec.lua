local infoview = require('lean.infoview')
local helpers = require('tests.helpers')
local fixtures = require('tests.fixtures')

helpers.setup {
  infoview = { autoopen = true },
  lsp = { enable = true },
  lsp3 = { enable = true },
}

describe('infoview', function()
  describe('defaults to paused when autopause = true', function()
    it('lean 4',
    function(_)
      vim.api.nvim_command("edit " .. fixtures.lean_project.some_existing_file)
      assert.initopened.infoview()
      helpers.wait_for_ready_lsp()
      assert.pin_text_kept.infoview()
      helpers.wait_for_server_progress()
      vim.api.nvim_win_set_cursor(0, {3, 23})
      infoview.__update()
      assert.pin_pos_changed.pin_text_kept.infoview()
    end)

    it('lean 3',
    function(_)
      vim.api.nvim_command("edit " .. fixtures.lean3_project.some_nested_existing_file)
      assert.buf.created.tracked_pending()
      assert.use_pendingbuf.opened_kept.pin_pos_changed.infoview()
      helpers.wait_for_ready_lsp()
      vim.api.nvim_win_set_cursor(0, {12, 15})
      helpers.wait_for_server_progress("no goals")
      vim.api.nvim_win_set_cursor(0, {3, 23})
      infoview.__update()
      assert.pin_pos_changed.pin_text_kept.infoview()
    end)
  end)
  describe('can be unpaused', function()
    it('lean 4',
    function(_)
      vim.api.nvim_command("edit " .. fixtures.lean_project.some_existing_file)
      assert.buf.left.tracked_pending()
      assert.use_pendingbuf.opened_kept.pin_pos_changed.infoview()
      helpers.wait_for_ready_lsp()
      vim.api.nvim_win_set_cursor(0, {3, 23})
      infoview.__update()
      assert.pin_pos_changed.pin_text_kept.infoview()
      infoview.get_current_infoview().info.pin:unpause()
      assert.pin_text_changed.infoview()
      assert.has_all(infoview.get_current_infoview().info.pin.msg, {"Processing file..."})
      helpers.wait_for_server_progress()
      assert.pin_text_changed.infoview()
      assert.has_all(infoview.get_current_infoview().info.pin.msg, {"expected type", "⊢ Nat"})
    end)

    it('lean 3',
    function(_)
      vim.api.nvim_command("edit " .. fixtures.lean3_project.some_nested_existing_file)
      assert.buf.left.tracked_pending()
      helpers.wait_for_ready_lsp()
      vim.api.nvim_win_set_cursor(0, {3, 23})
      infoview.__update()
      assert.use_pendingbuf.pin_pos_changed.pin_text_changed.opened_kept.infoview()
      assert.has_all(infoview.get_current_infoview().info.pin.msg, {"⊢ ℕ"})
    end)
  end)

  it('can be paused again', function(_)
    infoview.get_current_infoview().info.pin:pause()
    assert.opened_kept.infoview()
    vim.api.nvim_command("edit " .. fixtures.lean_project.some_existing_file)
    assert.buf.left.tracked_pending()
    assert.use_pendingbuf.opened_kept.pin_pos_changed.infoview()
    helpers.wait_for_ready_lsp()
    assert.pin_text_kept.infoview()
    helpers.wait_for_server_progress()
    vim.api.nvim_win_set_cursor(0, {3, 23})
    infoview.__update()
    assert.pin_pos_changed.pin_text_kept.infoview()
  end)
end)
